'''Generate autoload/text_omnicomplete_data.vim from word lists.'''

import os

# The absolute path to the directory containing this file.
PLUGIN_ROOT = os.path.dirname(os.path.abspath(__file__))
# The absolute path to the data directory.
DATA_DIR = os.path.join(PLUGIN_ROOT, 'data/')

def py_dict_to_ordered_vim_dict(d):
    entries = []
    for key in sorted(d.keys()):
        s = "'{}':{}".format(key, str(d[key]).replace(' ', ''))
        entries.append(s)
    return '{{{}}}'.format(','.join(entries))

# Get list of valid English words (i.e. Scrabble words).
with open(os.path.join(DATA_DIR, 'scrabble-words.txt'), 'r') as f:
    lines = f.readlines()
    scrabble_words = set(map(lambda e: e.strip().lower(), lines))

# {prefix: suffixes, ...}
# Note: suffixes will be ordered by frequency.
# e.g. {'a': ['pple', 'corn', 'le', ...], 'ap': ['ple', ...], ...}
d1 = {}
with open(os.path.join(DATA_DIR, '1gram.txt'), 'r') as f:
    for line in f:
        word = line.strip()  # Remove newline.
        # Use only valid words (i.e. Scrabble words).
        if word not in scrabble_words:
            continue

        # Generate all prefix, suffix combinations for the word.
        for i in range(len(word) - 1):
            prefix = word[:i + 1]
            suffix = word[i + 1:]
            if prefix in d1:
                d1[prefix].append(suffix)
            else:
                d1[prefix] = [suffix]
one_grams_vim_dict = py_dict_to_ordered_vim_dict(d1)

# {first_word: second_words, ...}
# Note: second_words will NOT be ordered by frequency.
# e.g. {'very': ['accurate', 'advanced', ...], 'is': ['a', 'about', ...], ...}
d2 = {}
with open(os.path.join(DATA_DIR, '2gram.txt'), 'r') as f:
    for line in f:
        split_bigram = line.strip().split()
        first_word = split_bigram[0]
        second_word = split_bigram[1]
        # Use only valid words (i.e. Scrabble words).
        if first_word not in scrabble_words or second_word not in scrabble_words:
            continue

        if first_word in d2:
            d2[first_word].append(second_word)
        else:
            d2[first_word] = [second_word]
two_grams_vim_dict = py_dict_to_ordered_vim_dict(d2)

vim_script = '''" This file is generated by build.py.
" Do not edit this file! Edit build.py instead.

if exists('g:text_omnicomplete_enable_plugin') && g:text_omnicomplete_enable_plugin == 0
    finish
endif

let s:save_cpo = &cpo
set cpo&vim

function text_omnicomplete_data#get_prefix_matches(prefix)
    return get(s:word_dict, a:prefix, [])
endfunction

function text_omnicomplete_data#get_bigram_matches(first_word)
    return get(s:bigram_dict, a:first_word, [])
endfunction

let s:word_dict = {0}
let s:bigram_dict = {1}

let &cpo = s:save_cpo
unlet s:save_cpo
'''.format(one_grams_vim_dict, two_grams_vim_dict)

with open(os.path.join(PLUGIN_ROOT, 'autoload/text_omnicomplete_data.vim'),
          'w') as f:
    f.write(vim_script)
